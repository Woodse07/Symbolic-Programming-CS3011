QUESTION 1

(a)

(i)	X = 1.
x = 1.

(ii) X == Y.
false.

(iii) 0+1 = 1+0.
false. 				//Why? If = is the same as 'is', it only accepts and evaluates the right 
					//argument as an arithmetic expression.(we get same ouput with 'is')

(iv) 0+1 =:= 1+0.
true.				//Beause '=:=' evaluates both arguments and compares the result.

(v) X \= f(X).
false.				//Why? 'A \= B' is equivalent to 'not (A = B)' X would unify with f(X). 
					// and the invert of this would be false.

(vi) f(X) \= g(Y).
true.				//Why? These terms can't unify, and the opposite of this is true.

(vii) [1|[2,3]] = .(1,.(2,[3])).
true.				// '.' acts as cons operator in haskell.


(viii) X == f(X).	
false.				//Why? '==' just performs a check to see if both arguments are equivelant
					//which they are not.

(ix) X > 0.
ERROR: Arguments are not sufficiently instantiated

(x) findall(X,X \= 1, L).
L = [].				//Why? documentation says findall succeeds with empty list if goal has no 						//solutions. 



(b)

isSet([]).
isSet([X|Y]) :- not(member(X, Y)), isSet(Y).



(c)

//I'm not sure about this.. I get the right answer but it doesn't terminate, if I enter ';'
//It will show false. 
moreThanOne([X|Y]) :- Y \= [], not(member(X,Y)); moreThanOne(Y).


(d)

//Same issue here as last time, not sure how to fix.
moreThan(List, 0) :- not(List == []).
moreThan([X|Y], Num) :- not(member(X,Y)) -> succ(Temp, Num), moreThan(Y, Temp) ; member(X,Y), moreThan(Y, Num).




